# ASP.NET Core

trigger:
- master

jobs:
- job: Test
  timeoutInMinutes: 0
  pool:
    vmImage: 'windows-latest'

  steps:

# TEST
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: 8.x

  - task: DotNetCoreCLI@2
    displayName: dotnet restore
    inputs:
      command: 'restore'
      projects: '**/*.csproj'

  - task: DotNetCoreCLI@2
    displayName: dotnet build
    inputs:
      command: 'build'
      projects: '**/*.csproj'


  - task: DotNetCoreCLI@2
    displayName: dotnet test
    inputs:
      command: 'test'
      projects: '**/*[Tt]ests/*.csproj'
      arguments: '--logger trx'

  - task: PowerShell@2
    displayName: Summarize test failures
    condition: always()
    inputs:
      targetType: 'filePath'
      filePath: 'build/summarize-trx.ps1'
      arguments: '-SearchRoot $(Agent.TempDirectory) -OutPath $(Build.ArtifactStagingDirectory)/test-failures-summary.txt'

  - task: ArchiveFiles@2
    condition: always()
    inputs:
      rootFolderOrFile: '$(Build.SourcesDirectory)/SilveR.IntegrationTests/bin/Debug/net8.0/ActualResults/*'
      archiveFile: '$(Build.ArtifactStagingDirectory)/Test-Results.zip'


# BUILD LITE VERSION
  - script: 'dotnet clean'
    displayName: Clean Build
    condition: always()

  - task: DotNetCoreCLI@2
    displayName: dotnet publish
    condition: always()
    inputs:
      command: 'publish'
      arguments: '--output $(Build.ArtifactStagingDirectory) -r win-x64'
      zipAfterPublish: true

  - task: CopyFiles@2
    condition: always()
    inputs:
      contents: '*.zip'
      targetFolder: '$(Build.ArtifactStagingDirectory)/'

  - task: CmdLine@2
    condition: always()
    inputs:
      script: 'ren $(Build.ArtifactStagingDirectory)\SilveR.zip InVivoStat-win-x64-test-only.zip'

  - task: PublishBuildArtifacts@1
    condition: always()
    inputs:
      ArtifactName: 'drop'

  # Delete all existing assets from the GitHub release before uploading new ones
  - task: PowerShell@2
    displayName: Remove existing GitHub release assets
    condition: always()
    env:
      GITHUB_TOKEN: $(GITHUB_TOKEN)
    inputs:
      targetType: 'inline'
      script: |
        $ErrorActionPreference = 'Stop'
        $owner = 'robalexclark'
        $repo  = 'SilveR'
        $tag   = '4.11.0'

        if (-not $env:GITHUB_TOKEN) {
          Write-Host "GITHUB_TOKEN not set; skipping asset delete."
          exit 0
        }

        $headers = @{
          Authorization = "Bearer $($env:GITHUB_TOKEN)"
          'User-Agent'  = 'azure-devops-pipeline'
          Accept        = 'application/vnd.github+json'
        }

        try {
          $release = Invoke-RestMethod -Headers $headers -Uri "https://api.github.com/repos/$owner/$repo/releases/tags/$tag" -Method Get
        }
        catch {
          Write-Host "Release with tag '$tag' not found; skipping asset delete."
          exit 0
        }

        if ($null -ne $release.assets -and $release.assets.Count -gt 0) {
          foreach ($asset in $release.assets) {
            Write-Host ("Deleting asset {0} (ID {1})" -f $asset.name, $asset.id)
            Invoke-RestMethod -Headers $headers -Uri "https://api.github.com/repos/$owner/$repo/releases/assets/$($asset.id)" -Method Delete
          }
        }
        else {
          Write-Host "No existing assets to delete."
        }

  - task: GitHubRelease@0
    condition: always()
    inputs:
      gitHubConnection: github
      repositoryName: robalexclark/SilveR
      action: edit
      target: 'master'
      tagSource: manual
      tag: '4.11.0'
      title: '4.11.0'
      assetUploadMode: 'replace'
      isPreRelease: true
      isDraft: false
      
      

- job: Windows
  dependsOn: Test
  pool:
    vmImage: 'windows-2019'

  steps:

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: 6.x

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: 8.x

  - task: NodeTool@0
    inputs:
      versionSpec: '16.x'

  - script: dotnet tool install ElectronNET.CLI -g
    displayName: Install Electron.Net CLI

  - script: 'dotnet clean'
    displayName: Clean Build

  - script: electronize build /target win
    workingDirectory: ./SilveR
    displayName: Build for Win-x64

  - script: 'xcopy $(Build.SourcesDirectory)\SilveR\bin\Desktop\"InVivoStat Setup 4.11.0.exe" $(Build.ArtifactStagingDirectory)'
    displayName: Copy InVivoStat Setup 4.11.0.exe

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)\SilveR\bin\Desktop\InVivoStat Setup 4.11.0.exe'
      ArtifactName: 'drop'

  - task: GitHubRelease@0
    inputs:
      gitHubConnection: github
      repositoryName: robalexclark/SilveR
      action: edit
      target: 'master'
      tagSource: manual
      tag: '4.11.0'
      title: '4.11.0'
      assetUploadMode: 'replace'
      isPreRelease: true
      isDraft: false



- job: Linux
  dependsOn: Test
  pool:
    vmImage: 'ubuntu-latest'

  steps:

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: 6.x

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: 8.x

  - task: NodeTool@0
    inputs:
      versionSpec: '16.x'

  - script: dotnet tool install ElectronNET.CLI -g
    displayName: Install Electron.Net CLI

  - script: sudo npm install electron-builder --global
    displayName: Install electron builder

  #- script: sudo chown -R $(whoami) ~/.npm
  #  displayName: Reset permissions

  - script: electronize build /target linux
    workingDirectory: ./SilveR
    displayName: Build for Linux

  - script: 'cp $(Build.SourcesDirectory)/SilveR/bin/Desktop/InVivoStat-4.11.0.AppImage $(Build.ArtifactStagingDirectory)'  
    displayName: Copy InVivoStat Setup 4.11.0.AppImage

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/InVivoStat-4.11.0.AppImage'
      ArtifactName: 'drop'

  - task: GitHubRelease@0
    inputs:
      gitHubConnection: github
      repositoryName: robalexclark/SilveR
      action: edit
      target: 'master'
      tagSource: manual
      tag: '4.11.0'
      title: '4.11.0'
      assetUploadMode: 'replace'
      isPreRelease: true
      isDraft: false



- job: MacOS
  dependsOn: Test
  pool:
    vmImage: 'macOS-latest'

  steps:
  
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: 6.x

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: 8.x

  - task: NodeTool@0
    inputs:
      versionSpec: '16.x'

  - script: dotnet tool install ElectronNET.CLI -g
    displayName: Install Electron.Net CLI

  - script: sudo npm install electron-builder --global
    displayName: Install electron-builder

  - script: electronize build /target osx 
    workingDirectory: ./SilveR
    displayName: Build for MacOS

  - script: 'cp $(Build.SourcesDirectory)/SilveR/bin/Desktop/InVivoStat-4.11.0.dmg $(Build.ArtifactStagingDirectory)'
    displayName: Copy InVivoStat Setup 4.11.0.dmg

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/InVivoStat-4.11.0.dmg'
      ArtifactName: 'drop'

  - task: GitHubRelease@0
    inputs:
      gitHubConnection: github
      repositoryName: robalexclark/SilveR
      action: edit
      target: 'master'
      tagSource: manual
      tag: '4.11.0'
      title: '4.11.0'
      assetUploadMode: 'replace'
      isPreRelease: true
      isDraft: false
